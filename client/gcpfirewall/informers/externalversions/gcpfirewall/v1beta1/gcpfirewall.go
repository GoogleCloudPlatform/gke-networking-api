/*
Copyright 2024 Google LLC
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1beta1

import (
	"context"
	time "time"

	gcpfirewallv1beta1 "github.com/GoogleCloudPlatform/gke-networking-api/apis/gcpfirewall/v1beta1"
	versioned "github.com/GoogleCloudPlatform/gke-networking-api/client/gcpfirewall/clientset/versioned"
	internalinterfaces "github.com/GoogleCloudPlatform/gke-networking-api/client/gcpfirewall/informers/externalversions/internalinterfaces"
	v1beta1 "github.com/GoogleCloudPlatform/gke-networking-api/client/gcpfirewall/listers/gcpfirewall/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// GCPFirewallInformer provides access to a shared informer and lister for
// GCPFirewalls.
type GCPFirewallInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1beta1.GCPFirewallLister
}

type gCPFirewallInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewGCPFirewallInformer constructs a new informer for GCPFirewall type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewGCPFirewallInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredGCPFirewallInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredGCPFirewallInformer constructs a new informer for GCPFirewall type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredGCPFirewallInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.NetworkingV1beta1().GCPFirewalls().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.NetworkingV1beta1().GCPFirewalls().Watch(context.TODO(), options)
			},
		},
		&gcpfirewallv1beta1.GCPFirewall{},
		resyncPeriod,
		indexers,
	)
}

func (f *gCPFirewallInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredGCPFirewallInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *gCPFirewallInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&gcpfirewallv1beta1.GCPFirewall{}, f.defaultInformer)
}

func (f *gCPFirewallInformer) Lister() v1beta1.GCPFirewallLister {
	return v1beta1.NewGCPFirewallLister(f.Informer().GetIndexer())
}
